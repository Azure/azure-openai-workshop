{"filename": "data/raw/2010.15980.pdf", "content": [{"page_number": 1, "page_content": "AUTOPROMPT: Eliciting Knowledge from Language Models with Automatically Generated Prompts Taylor Shin*\u2666 Yasaman Razeghi\u2217\u2666 Eric Wallace\u2660 \u2666University of California, Irvine Robert L. Logan IV\u2217\u2666 Sameer Singh\u2666 \u2660University of California, Berkeley {tshin1, yrazeghi, rlogan, sameer}@uci.edu ericwallace@berkeley.edu arXiv:2010.15980v2 [cs.CL] 7 Nov 2020 Abstract The remarkable success of pretrained lan- guage models has motivated the study of what kinds of knowledge these models learn dur- ing pretraining. Reformulating tasks as fill- in-the-blanks problems (e.g., cloze tests) is a natural approach for gauging such knowledge, however, its usage is limited by the manual effort and guesswork required to write suit- able prompts. To address this, we develop AUTOPROMPT, an automated method to cre- ate prompts for a diverse set of tasks, based on a gradient-guided search. Using AUTO- PROMPT, we show that masked language mod- els (MLMs) have an inherent capability to perform sentiment analysis and natural lan- guage inference without additional parame- ters or finetuning, sometimes achieving per- formance on par with recent state-of-the-art supervised models. We also show that our prompts elicit more accurate factual knowl- edge from MLMs than the manually created prompts on the LAMA benchmark, and that MLMs can be used as relation extractors more effectively than supervised relation extraction models. These results demonstrate that au- tomatically generated prompts are a viable parameter-free alternative to existing probing methods, and as pretrained LMs become more sophisticated and capable, potentially a re- placement for finetuning. 1 Introduction Pretrained language models (LMs) have had ex- ceptional success when adapted to downstream tasks via finetuning (Peters et al., 2018; Devlin et al., 2019). Although it is clear that pretrain- ing improves accuracy, it is difficult to determine whether the knowledge that finetuned LMs contain is learned during the pretraining or the finetuning * First three authors contributed equally. process. How can we directly evaluate the knowl- edge present in pretrained LMs, be it linguistic, factual, commonsense, or task-specific? Numerous techniques have been proposed to elicit such knowledge by analyzing pretrained LMs\u2019 internal representations. A common strategy is to use probing classifiers\u2014shallow classifiers that predict certain attributes using an LMs\u2019 representa- tions as features (Conneau et al., 2018; Liu et al., 2019). However, probing classifiers require ad- ditional learned parameters and are thus suscep- tible to false positives; high probing accuracy is not a sufficient condition to conclude that an LM contains a certain piece of knowledge (Hewitt and Liang, 2019; Voita and Titov, 2020). Attention visualization, another common technique, has a similar failure mode: attention scores may be corre- lated with, but not caused by the underlying target knowledge, leading to criticism against their use as explanations (Jain and Wallace, 2019; Wiegreffe and Pinter, 2019). Both probing and attention visu- alizations also struggle to evaluate knowledge that cannot be represented as simple token- or sequence- level classification tasks. A more direct approach for eliciting knowledge from these models, since they are language models after all, is prompting, i.e. converting tasks into a language model format. For example, Radford et al. (2019) frame summarization as a language modeling task by appending \u201cTL;DR:\u201d to the end of an article and then generating from an LM. Sim- ilarly, Petroni et al. (2019) manually reformulate a knowledge base completion task as a cloze test (i.e., a fill-in-the-blank problem). Compared to existing model analysis methods, prompting is non- invasive: it does not introduce large amounts of additional parameters or require direct inspection of a model\u2019s representations. Thus prompting pro- 1"}, {"page_number": 2, "page_content": "Original Input Cinp a real joy. AUTOPROMPT Iprompt a real joy. atmosphere alot dialogue Clone totally [MASK]. Trigger Tokens Itrig atmosphere, alot, dialogue, Clone... Masked LM p([MASK]|\u00e6prompt) Cris marvelous philanthrop Template X(Kinp, \"'trig) {sentence}[T][T][T][T][T][P]. p(y x prompt) + positive worse incompetence Worse + negative Figure 1: Illustration of AUTOPROMPT applied to probe a masked language model\u2019s (MLM\u2019s) ability to per- form sentiment analysis. Each input, xinp, is placed into a natural language prompt, xprompt, which contains a single [MASK] token. The prompt is created using a template, \u03bb, which combines the original input with a set of trigger tokens, xtrig. The trigger tokens are shared across all inputs and determined using a gradient-based search (Section 2.2). Probabilities for each class label, y, are then obtained by marginalizing the MLM predictions, p([MASK]|xprompt), over sets of automatically detected label tokens (Section 2.3). vides a lower bound on what the model \u201cknows\u201d, and is therefore a more useful analysis tool. How- ever, prompting unfortunately requires manually crafting the context to feed into the model. Not only is this time consuming and non-intuitive for many tasks (e.g., textual entailment), more impor- tantly, models are highly sensitive to this context: improperly-constructed contexts cause artificially low performance (Jiang et al., 2020). Overcoming the need to manually specify prompts would make prompting a more widely useful analysis tool. In this paper, we introduce AUTOPROMPT\u2014an automated method for generating prompts for any task, illustrated in Figure 1. Given a task, e.g., sen- timent analysis, AUTOPROMPT creates a prompt by combining the original task inputs (e.g. reviews) with a collection of trigger tokens according to a template. The same set of trigger tokens is used for all inputs, and is learned using a variant of the gradient-based search strategy proposed in Wallace et al. (2019). The LM predictions for the prompt are converted to class probabilities by marginal- izing over a set of associated label tokens, which can either be learned or specified ahead of time, enabling the LM to be evaluated the same as one would any other classifier. We validate the effectiveness of AUTOPROMPT in numerous experiments. First, we use AUTO- PROMPT to construct prompts that test pretrained masked language models (MLMs) on sentiment analysis and natural language inference (NLI). Our tests reveal that, without any finetuning, MLMs perform well on both of these tasks\u2014a properly- prompted RoBERTa achieves 91% accuracy on SST-2 (better than a finetuned ELMo model (Pe- ters et al., 2018)), and 69% accuracy on a bal- anced variant of the SICK-E dataset (Marelli et al., 2014). Next, we apply AUTOPROMPT to the fact re- trieval tasks of LAMA (Petroni et al., 2019), where we are able to construct prompts that more effec- tively elicit MLM\u2019s factual knowledge than exist- ing prompts generated using manual and corpus- mining methods. Concretely, we achieve 43.3% precision-at-1, compared to the current best single- prompt result of 34.1% (Jiang et al., 2020). We also introduce a variant of this task, similar to rela- tion extraction (RE), that tests whether MLMs can extract knowledge from a given piece of text. We show that MLMs can actually outperform existing RE models when context sentences with real facts are provided, however, they struggle when context sentences are artificially falsified. Finally, although the goal of AUTOPROMPT is to analyze models, we find that it provides certain practical advantages over finetuning. First, AU- TOPROMPT achieves higher average- and worst- case accuracy than finetuning in low-data regimes. Moreover, unlike finetuning, prompting LMs does not require large amounts of disk space to store model checkpoints; once a prompt is found, it can be used on off-the-shelf pretrained LMs. This is beneficial when serving models for multiple tasks. 2 Overview of AUTOPROMPT A natural way to elicit knowledge from pretrained LMs is to pose tasks as fill-in-the-blank problems."}, {"page_number": 3, "page_content": "p(y|xprompt) = 3 p([MASK] = w|xprompt) However, writing prompts is not only time consum- ing, but it is not clear that the same phrasing will be effective for every model, nor is it clear what crite- ria determine whether a particular phrasing the best to elicit the desired information. In light of this, we introduce AUTOPROMPT, a method that constructs customized prompts for a specific task and MLM of interest, to cause the MLMs to produce the desired knowledge.1 An illustration of AUTOPROMPT is provided in Figure 1. The prompt is constructed by taking the original task inputs\u2014a collection of one or more sequences of tokens (e.g., the review in Figure 1)\u2014and mapping them to a sequence of tokens using a template. In the following sections, we describe how AUTOPROMPT uses labeled train- ing data to construct prompts, and how it uses the output of the MLM as a prediction for the task. 2.1 Background and Notation For the purpose of prompt construction, we distin- guish the original task inputs xinp (e.g., the review in Figure 1, \u201ca real joy.\u201d) from the prompt xprompt (e.g., \u201ca real joy. atmosphere alot dialogue Clone totally [MASK].\u201d) that is fed into the MLM. The mapping from xinp to xprompt is performed using a template, \u03bb. This template defines where each input sequence will be placed in the prompt, as well as the placement of any additional tokens. In particular, it must also define the placement of a special [MASK] token for the MLM to fill in (de- noted by [P] in the template to distinguish it from other [MASK] tokens that might appear). Feeding the prompt into the MLM produces a probability distribution p([MASK]|xprompt) describing which tokens most likely fill in the blank. If class labels naturally correspond to tokens in the vocabulary (e.g., entity names in knowledge base completion tasks), this distribution may be readily interpreted as a distribution over class la- bels. However, for tasks such as sentiment analysis, there may be a set of label tokens Vy that corre- spond to a particular label y. For example, in Fig- ure 1, \u201cCris\u201d, \u201cmarvelous\u201d, and \u201cphilanthrop\u201d all indicate positive sentiment. In this case, the class probability is obtained by marginalizing over the 1Although we focus only on MLMs in this work, our method is trivially extendable to autoregressive LMs. The only adjustment is that the predict token must occur at the end of the prompt. set of label tokens: w\u2208Vy (1) 2.2 Gradient-Based Prompt Search So far, we have shown how to reformulate a clas- sification task as a language modeling task using prompts. Here, we propose a method for automatic prompt construction based on Wallace et al. (2019). The idea is to add a number of \u201ctrigger\u201d tokens that are shared across all prompts (denoted by [T] in the example template in Figure 1). These tokens are initialized to [MASK] tokens, and then iteratively updated to maximize the label likelihood (Equa- tion (1)) over batches of examples. Formally, at each step, we compute a first-order approximation of the change in the log-likelihood that would be produced by swapping the jth trigger token x (j) trig with another token w \u2208 V. Then we identify a candidate set Vcand of the top-k tokens estimated to cause the greatest increase: Vcand = top-k wT in\u2207 log p(y|xprompt) \u0644\u0627 (2) w\u2208V where win is the input embedding of w, and the gradient is taken with respect to the input embed- ding of x (j) trig. Note that computing this candidate set is roughly as expensive as a single forward pass and backward pass of the model (the dot-products require the same amount of multiplications as com- puting the LM output projection). For each candi- date in this set, we then re-evaluate Equation (1) on the updated prompt, and retain the prompt with the highest probability in the next step\u2014this requires k forward passes of the model. An example prompt produced by this method for the task of sentiment analysis is shown in Figure 1. 2.3 Automating Label Token Selection While in some settings the choice of label tokens is obvious (e.g., when class labels directly correspond to words in the vocabulary), it is less clear what label tokens are appropriate for problems involv- ing more abstract class labels (e.g., NLI). In this section, we develop a general two-step approach to automate the selection of the sets of label tokens Vy. In the first step, we train a logistic classifier to predict the class label using the contextualized embedding of the [MASK] token as input: h = Transformerenc(x\u02dc) (3)"}, {"page_number": 4, "page_content": "We write the output of this classifier as: (i) (i) p(y|h ) \u221d exp(h \u00b7 y + \u03b2y) (4) where y and \u03b2y are the learned weight and bias terms for the label y, and i represents the index of the [MASK] token. In the second step, we substitute h (i) with the MLM\u2019s output word embeddings wout to obtain a score s(y, w) = p(y|wout). Intuitively, be- cause wout \u00b7 h and y \u00b7 h are large for words and labels that are relevant to a particular context, sw \u221d exp(wout \u00b7 y +\u03b2y) should be large for words that are typically associated with a given label. The sets of label tokens are then constructed from the k-highest scoring words: Vy = top-k [s(y, w)] (5) w\u2208V 2.4 Relation to Other Prompting Methods Our work fits into a body of work that probes lan- guage model\u2019s knowledge via prompts. Previous works have used manually defined prompts to study an LM\u2019s ability to perform: commonsense rea- soning (Trinh and Le, 2018; Kwon et al., 2019; Shwartz et al., 2020), question answering (Lewis et al., 2019), fact recall (Petroni et al., 2019; Jiang et al., 2020; Bouraoui et al., 2019), summariza- tion (Radford et al., 2019), and other supervised tasks (Brown et al., 2020). Schick and Schutze \u00a8 (2020) use manually constructed prompts in con- junction with semi-supervised learning for few- shot learning. We instead automatically create prompts for any task, which leads to higher ac- curacy and opens up new phenomena to analyze. 2.5 Evaluation Setup In the following sections, we apply AUTOPROMPT to probe BERTBASE 2 (110M parameters) and RoBERTaLARGE\u2019s (355M parameters) knowledge of the following tasks: sentiment analysis, natu- ral language inference (NLI), fact retrieval, and relation extraction. We use the PyTorch imple- mentations and pretrained weights provided by the transformers Python library (Wolf et al., 2019). For sentiment analysis and NLI, we find label to- kens using the logistic-regression-based heuristic described in Section 2.3. For fact retrieval and re- lation extraction, we skip this step as the labels (entities) directly correspond to tokens in the vo- cabulary. For all tasks, we perform the prompt 2 For brevity, we will omit subscripts in the model names. search described in Section 2.2 for multiple itera- tions. In each iteration, we use a batch of training data to identify the candidate set Vcand of replace- ment trigger tokens. We then evaluate the label likelihoods of the updated prompts on a separate batch of data, and we retain the best trigger token in the next iteration of the search. At the end of every iteration, we measure the label likelihood on withheld development data, and return the best prompt found during the entire search as the final output. Performance is evaluated using the appro- priate task-specific metrics\u2014e.g., accuracy for sen- timent analysis and NLI, and precision@k for fact retrieval\u2014on a separate withheld test set. Our AUTOPROMPT implementation is publicly available at http://ucinlp.github.io/autoprompt, and supports prompt generation for pretrained mod- els in the HuggingFace transformers library (Wolf et al., 2019) on arbitrary datasets. 3 Sentiment Analysis Sentiment analysis is a fundamental task in NLP, both for natural language understanding research and real-world applications. It is also difficult to probe the extent to which MLMs understand senti- ment without finetuning. Setup We apply our method to convert instances from the binary Stanford Sentiment Treebank (Socher et al., 2013, SST-2) into prompts, using the standard train/test splits. We find label to- kens using a prompt based on the template in Ta- ble 3. For our gradient-based prompt search, we perform a grid search over the following hyperpa- rameters: |Vcand| \u2208 {10, 100}, |Vy| \u2208 {1, 3, 5}, |xtrig| \u2208 [3, 6]. 3 All prompts are initialized with the same template used to find the label set. We also construct a prompt manually (before automated prompts are generated, to avoid bias) based on the intuition that SST-2 is comprised of movie reviews. We use \u201c{sentence} this movie was [P].\u201d as the template, and use \u201cterrible\u201d and \u201cfantastic\u201d for the negative and positive label to- kens, respectively. Results We show results in Table 1, along with reference scores from the GLUE (Wang et al., 2019) SST-2 leaderboard, and scores for a lin- ear probe trained over the elementwise average of the LM token representations. Prompts gen- erated by AUTOPROMPT reveal that both BERT 3Required 2 days to run with 8 NVIDIA 2080Ti GPUs."}, {"page_number": 5, "page_content": "Dev Test 101 Finetuned Model 0.9 Accuracy 0.7 \u2020 \u2020 0.5 \u2020 \u2020 BiLSTM BERT (finetuned) - 93.5 RoBERTa (linear probing) 87.9 88.8 RoBERTa (finetuned) - 96.7 - 82.8 BiLSTM + ELMo - 89.3 BERT (linear probing) 85.2 83.4 102 103 BERT (manual) 63.2 63.2 BERT (AUTOPROMPT) 80.9 RoBERTa (manual) 85.3 AutoPrompt - (a) BERT on SST-2 82.3 85.2 0.9 RoBERTa (AUTOPROMPT) 91.2 91.4 0.7 Table 1: Sentiment Analysis performance on the SST- 2 test set of supervised classifiers (top) and fill-in-the- blank MLMs (bottom). Scores marked with \u2020 are from the GLUE leaderboard: http://gluebenchmark.com/ leaderboard. and RoBERTa have a strong knowledge of senti- ment analysis: without any finetuning, BERT per- forms comparably to a supervised BiLSTM, and RoBERTa achieves an accuracy on-par with fine- tuned BERT and ELMo models. In addition, we observe that our automatically constructed prompts are more effective than manual prompts, and that they are difficult to construct using human intuition: the best template for RoBERTa is \u201c{sentence} at- mosphere alot dialogue Clone totally [P].\u201d We include results on the effect of the AUTOPROMPT hyperparameters in Appendix A. Accuracy in Low-Data Settings Although the goal of AUTOPROMPT is to probe a model\u2019s knowl- edge, we also find that it may be a viable alternative to finetuning in the low-data regime. To show this, we measure the development set accuracy of AU- TOPROMPT prompts when using random subsets of 10, 100, and 1000 instances from the training data. We run our prompt search with |xtrig| = 10, |Vy| = 3, and |Vcand| = 10. We compare to the performance of BERT and RoBERTa finetuned on the same data. For fair comparison between AU- TOPROMPT and finetuning, we use Mosbach et al. (2020)\u2019s recommended parameters for finetuning on small datasets: trained for 20 epochs, using AdamW (Loshchilov and Hutter, 2018) with bias correction and a learning rate that linearly increases to 2 \u00d7 10\u22125 in the first 10% of iterations, and lin- early decreases to 0 afterwards. Experiments are repeated 10 times on random subsets of data (and seeds for the finetuned models). Best-case, worst- case, and average performance are shown in Fig- ure 2. Note that results in the EMNLP version had a bug that has since been fixed. Accuracy 102 0.5 101 103 (b) RoBERTa on SST-2 0.7 Accuracy 0.5 0.3 T 101 102 103 (c) BERT on SICK-E 0.7 Accuracy 0.5 0.3 101 TT 102 103 (d) RoBERTa on SICK-E Figure 2: Effect of Training Data on sentiment analy- sis and NLI for AUTOPROMPT vs. finetuning. X-axis is the number of data points used during training. Error bars plot the max. and min. accuracies observed over 10 independent runs. (revised since EMNLP version). We observe that while finetuning outperforms AUTOPROMPT on sentiment analysis, AUTO- PROMPT can perform better than finetuning on NLI. Notably, AUTOPROMPT elicits better average per- formance from both BERT and RoBERTa given only 10 training examples. Furthermore, results for RoBERTa are more stable across all sample sizes whereas finetuning can result in \u201cfailed runs\u201d (con- sistent with Dodge et al. 2020). This behavior in the low-data regime is an interesting phenomenon, and suggests that there are barriers that MLMs must surmount when they are converted to fine- tuned classifiers that are not encountered when the task is presented as masked language modeling. 4 Natural Language Inference To evaluate the semantic understanding of MLMs, we experiment on Natural Language Inference"}, {"page_number": 6, "page_content": "Model SICK-E Datasets standard 3-way 2-way Majority 56.7 33.3 50.0 BERT (finetuned) 86.7 84.0 95.6 BERT (linear probing) 68.0 49.5 91.9 RoBERTa (linear probing) 72.6 49.4 91.1 BERT (AUTOPROMPT) 62.3 65.0 RoBERTa (AUTOPROMPT) 55.4 69.3 87.3 85.7 Table 2: Natural Language Inference performance on the SICK-E test set and variants. (Top) Baseline classi- fiers. (Bottom) Fill-in-the-blank MLMs. (NLI). NLI is crucial in many tasks such as reading comprehension and commonsense reasoning (Bow- man et al., 2015), and it is used as a common bench- mark for language understanding. Setup We use the entailment task from the SICK dataset (Marelli et al., 2014, SICK-E) which con- sists of around 10,000 pairs of human-annotated sentences labeled as entailment, contradiction, and neutral. The standard dataset is biased toward the neutral class which represent 56.7% of instances. We also experiment on an unbiased variant with 2-way classification of contradiction vs. entail- ment (2-way), as well as an unbiased 3-way clas- sification variant (3-way). The template used for AUTOPROMPT is provided in Table 3. We search over the following parameters: |Vcand| \u2208 {10, 50}, |Vy| \u2208 {1, 3, 5, 10}, |xtrig| \u2208 [1, 5], and choose the best prompt according to development set accuracy. Results Table 2 shows that AUTOPROMPT con- siderably outperforms the majority baseline in all experiments. For example, on the 2-way SICK-E dataset, AUTOPROMPT is comparable to a super- vised finetuned BERT. We also test linear probes\u2014 linear classifiers trained on top of frozen MLM representations with average pooling \u2014and find AUTOPROMPT has comparable or higher accuracy, despite linear probes being susceptible to false pos- itives. Overall, these results demonstrate that both BERT and RoBERTa have some inherent knowl- edge of natural language inference. We also examine the efficacy of AUTOPROMPT in the low-data regime (using the same procedure as SST-2) on the unbiased 3-way SICK-E data. The results in Figure 2 show that AUTOPROMPT per- forms on par with finetuned BERT and significantly better than finetuned RoBERTa in low data settings. MLMs Excel on Contradiction We find that the label tokens are more interpretable for con- tradiction compared to entailment or neutral (ex- amples in Table 3). We investigate if this hurts the model performance on entailment and neutral classes. We measure the precision for each la- bel in the 3-way balanced SICK-E dataset. BERT achieves 74.9%, 54.4%, and 36.8% precision for contradiction, entailment, and neutral cases, respec- tively, while RoBERTa obtains 84.9%, 65.1%, and 57.3%. These results suggest that AUTOPROMPT may be more accurate for concepts that can be eas- ily expressed using natural label tokens. 5 Fact Retrieval An important question is whether pretrained MLMs know facts about real-world entities. The LAMA dataset (Petroni et al., 2019) evaluates this using cloze tests that consist of (sub, rel, obj) triples, e.g. (Obama, bornIn, Hawaii), and manually created prompts with missing objects, e.g. \u201cObama was born in [MASK].\u201d. LPAQA (Jiang et al., 2020) ex- tends this idea by systematically creating prompts that are generated by mining Wikipedia, paraphras- ing, and crowdsourcing. In this section, we use the same cloze-style setup but automatically gener- ate prompts in order to better evaluate the factual knowledge of MLMs. We compare our approach against LAMA and LPAQA, which are explicitly designed for the task of fact retrieval. Setup We reformulate fact retrieval by mapping (sub,rel,obj) triples to a prompt using the template \u201c{sub}[T]. . . [T][P].\u201d, where the trigger tokens are specific to the relation rel and the correct object obj is the label token. We use the original test set from LAMA (Petroni et al., 2019), henceforth Orig- inal. To collect training data for AUTOPROMPT, we gather at most 1000 facts for each of the 41 re- lations in LAMA from the T-REx dataset (ElSahar et al., 2018). For the relations that still have less than 1000 samples, we gather extra facts straight from Wikidata. We ensure that none of the T-REx triples are present in the test set, and we split the data 80-20 into train and development sets. More- over, because the collected T-REx data is from a slightly different distribution than the LAMA test set, we also consider a separate evaluation where we split the T-REx triples into a 60-20-20 train/dev/test split and evaluate on the test set. This T-REx dataset is used to measure the performance of our prompts when the train and test data is from the same distribution."}, {"page_number": 7, "page_content": "Task Prompt Template Sentiment Analysis {sentence} [T]. . . [T] [P]. Prompt found by AUTOPROMPT unflinchingly bleak and desperate Writing academicswhere overseas will appear [MASK]. Label Tokens pos: partnership, extraordinary, ##bla neg: worse, persisted, unconstitutional NLI {prem}[P][T]. . . [T]{hyp} Two dogs are wrestling and hugging [MASK] concretepathic workplace There is no dog wrestling and hugging Hall Overton fireplacemade antique son alto [MASK]. Leonard Wood (born February 4, 1942) is a former Canadian politician. Leonard Wood gymnasium brotherdicative himself another [MASK]. con: Nobody, nobody, nor ent: ##found, ##ways, Agency neu: ##ponents, ##lary, ##uated Fact X plays Y music Retrieval {sub}[T]. . . [T][P]. Relation X is a Y by profession Extraction {sent}{sub}[T]. . . [T][P]. Table 3: Example Prompts by AUTOPROMPT for each task. On the left, we show the prompt template, which combines the input, a number of trigger tokens [T], and a prediction token [P]. For classification tasks (sentiment analysis and NLI), we make predictions by summing the model\u2019s probability for a number of automatically selected label tokens. For fact retrieval and relation extraction, we take the most likely token predicted by the model. We use AUTOPROMPT with 5 or 7 tokens, and select the search parameters using the T-REx de- velopment set. We prevent proper nouns and to- kens that appear as gold objects in the training data from being selected as trigger tokens. This is done to prevent AUTOPROMPT from \u201ccheating\u201d by em- bedding common answers inside the prompt. To evaluate, we observe the rank of the true object in label token distribution of the MLM, and use stan- dard ranking metrics: mean reciprocal rank (MRR), precision-at-1 (P@1), and precision-at-10 (P@10). Results Table 4 shows the performance of MLMs with different prompting methods, and we show qualitative examples in Table 3 and in Appendix C. Prompts generated using AUTOPROMPT can ex- tract factual knowledge from BERT more effec- tively than their manual and mined counterparts: we improve P@1 by up to 12 points. Moreover, despite AUTOPROMPT using only one prompt per relation, it still outperforms LPAQA\u2019s ensemble method (which averages predictions for up to 30 prompts) by approximately 4 points. Using 7 trig- ger tokens achieves slightly higher scores than 5 trigger tokens, although the difference is not sub- stantial. This indicates that our approach is stable to the choice of trigger length, which is consis- tent with our sentiment analysis results. Overall, these results show that AUTOPROMPT can retrieve facts more effectively than past prompting meth- ods, thus demonstrating that BERT contains more factual knowledge than previously estimated. Relation Breakdown We also provide a detailed breakdown of the prompts found by Petroni et al. (2019) and AUTOPROMPT, and their associated ac- curacies in Appendix C, Table 7. Manual prompts are competitive when the prompt is easy to specify, e.g., the prompt \u201cwas born in\u201d for the PLACE OF BIRTH relation. On the other hand, AUTOPROMPT performs especially well for relations that are dif- ficult to specify in a natural language prompt. For example, Petroni et al. (2019)\u2019s prompt for the PO- SITION PLAYED ON TEAM relation is \u201c{sub} plays in [MASK] position\u201d, which is not as specific as the relation requires. Although the prompt from AU- TOPROMPT is not grammatical (\u201c{sub} ediatric striker ice baseman defensive {obj}\u201d), it does con- tain tokens that are directly related to sports. BERT outperforms RoBERTa We finally di- rectly compare BERT and RoBERTa. To do so, we subsample the LAMA test set to consist of ex- amples where the object is a single token for both BERT and RoBERTa (Original-RoBERTa).4 BERT actually slightly outperforms RoBERTa, and we find that the prompts generated for RoBERTa tend to contain more irrelevant words (see Appendix C, Table 7). For example, the prompt generated by RoBERTa for the PLAYS INSTRUMENT relation contains words such as \u201cTrump\u201d and symbols such as \u201c , \u201d (),\u201d for the POSITION PLAYED ON TEAM relation. It is surprising that RoBERTa does not 4The original dataset consists of examples where the object is a single token for BERT."}, {"page_number": 8, "page_content": "Original Prompt Type MRR P@10 P@1 MRR LAMA 40.27 43.57 AUTOPROMPT 7 Tokens 53.89 59.49 31.10 35.79 54.29 34.10 AUTOPROMPT 5 Tokens 53.06 72.17 42.94 54.42 70.80 73.93 54.89 43.34 72.02 45.57 T-REx P@10 P@1 Model MRR P@10 P@1 39.86 57.27 26.38 LPAQA (Top1) 62.03 BERT 55.22 74.01 45.23 31.16 RoBERTa 49.90 68.34 40.01 45.40 Table 4: Factual Retrieval: On the left, we evaluate BERT on fact retrieval using the Original LAMA dataset from Petroni et al. (2019). For all three metrics (mean reciprocal rank, mean precision-at-10 (P@10), and mean precision-at-1(P@1)), AUTOPROMPT significantly outperforms past prompting methods. We also report results on a T-REx version of the data (see text for details). On the right, we compare BERT versus RoBERTa on a subset of the LAMA data using AUTOPROMPT with 5 tokens. perform better than BERT, and it is worthy of inves- tigating this further in future work. Additionally, recall that prompting is a lower bound on a model\u2019s knowledge: the lower relative performance does not mean that the model actually knows less. 6 Relation Extraction Apart from evaluating whether MLMs know facts, it is also important to evaluate whether they can extract knowledge from text. In this section, we use the task of relation extraction (RE)\u2014to identify how entities are related in a given sentence\u2014an important task in information extraction. We create RE prompts in a similar fashion as fact retrieval: for a given triple (subj,rel,obj) and sentence that expresses this relation, we construct a prompt as \u201c{sent}{sub}[T]. . . [T][P].\u201d, where the trigger to- kens are specific to the relation, and label token is the correct object obj (see Table 3 for an example). Setup We use the T-Rex dataset for RE because each T-REx fact comes with context sentences that mention the subject and object surface forms. We compare AUTOPROMPT to LAMA and LPAQA (their prompts are still useful here), as well as a re- cent supervised relation extraction model (Sorokin and Gurevych, 2017) that was also used by Petroni et al. (2019). To make the evaluation fair for the supervised RE model, we modify the standard RE evaluation. We give the model credit as long as it does not predict a different relation for the subject and object, i.e. we ignore the \u201cno relation\u201d pre- diction and all other relations. We also drop all sentences from evaluation for which the model\u2019s named entity extractor failed to identify the sub- ject and the object as entities. See Appendix B for further details. For the evaluation of all systems, we treat a prediction as correct if it is either the canonical version of the object (e.g., \u201cUSA\u201d) or the rendered surface form (e.g., \u201cAmerican\u201d) for any of the context sentences in a given triple. Results Table 5 shows the results for BERT and RoBERTa. MLMs can extract relational informa- tion more effectively than the supervised RE model, providing up to a 33% increase on the task when using AUTOPROMPT. RoBERTa also outperforms the supervised RE model, although it is worse than BERT (likely for similar reasons as we outline in Section 5). For both BERT and RoBERTa, we no- tice that the trigger tokens consist of words related to their corresponding relations (see Appendix D, Table 8 for full list), e.g. RoBERTa selects \u201cdefy trademarks of namesake manufacturer\u201d for rela- tion MANUFACTURER/PRODUCER OF PRODUCT. Perturbed Sentence Evaluation A possible ex- planation for the strong results of MLMs in the RE setting is that they may already know many of the relations. Thus, they may directly predict the objects instead of extracting them. To separate this effect, we synthetically perturb the relation extrac- tion dataset by replacing each object in the test data with a random other object and making the same change to the prompt. For example, \u201cRyo Kase (born November 9, 1974 in Yokohama\u2192Yorkshire) is a Japanese actor\u201d where Ryo Kase is the subject, Yokohama is the original object, and Yorkshire is the new object. We regenerate the prompts using the perturbed version of the data. The accuracy of the RE model does not change significantly on the perturbed data (Table 5), how- ever, the accuracy of the MLMs decreases signifi- cantly. This indicates that a significant portion of MLM accuracy comes from background informa- tion rather than relation extraction. Nevertheless, our prompts for BERT outperform their LAMA and LPAQA counterparts, which provides further evi- dence that AUTOPROMPT produces better probes."}, {"page_number": 9, "page_content": "Model Perturbed Original Supervised RE LSTM 57.95 90.73 56.43 BERT (AUTOPROMPT) RoBERTa (AUTOPROMPT) 60.33 28.95 58.81 BERT (LAMA) 69.06 28.02 BERT (LPAQA) 76.55 30.79 Table 5: Relation Extraction: We use prompts to test pretrained MLMs on relation extraction. Compared to a state-of-the-art LSTM model from 2017, MLMs have higher mean precision-at-1 (P@1), especially when us- ing prompts from AUTOPROMPT. We also test models on sentences that have been edited to contain incorrect facts. The accuracy of MLMs drops significantly on these sentences, indicating that their high performance stems from their factual knowledge. 7 Discussion Prompting as an Alternative to Finetuning The goal of prompting a language model is to probe the knowledge that the model acquired from pre- training. Nevertheless, prompting has some prac- tical advantages over finetuning for solving real- world tasks. First, as shown in Section 3, prompts generated using AUTOPROMPT can achieve higher accuracy than finetuning in the low-data regime. Moreover, prompting has advantages over finetun- ing when trying to solve many different tasks (e.g., the many users of the OpenAI GPT-3 API (Brown et al., 2020)). In particular, finetuning requires storing large language model checkpoints for each individual task, and drastically increases system cost and complexity because it requires deploying many different models at the same time. Prompt- ing alleviates both of these issues. Only prompts are stored for each individual task, while the same pretrained model is used across all of the tasks. Limitations of Prompting There are certain phenomena that are difficult to elicit from pre- trained language models via prompts. In our pre- liminary evaluation on datasets such as QQP (Iyer et al., 2017) and RTE (Dagan et al., 2005), prompts generated manually and with AUTOPROMPT did not perform considerably better than chance. How- ever, we cannot conclude that BERT does not know paraphrasing or entailment from these results. In general, different probing methods have different tasks and phenomena they are suitable for: AUTO- PROMPT makes prompt-based probes more gener- ally applicable, but, it still remains just one tool in the toolbox of the interpretability researcher. Limitations of AUTOPROMPT One downside of AUTOPROMPT is that it requires labeled train- ing data. Although this is also required for other probing techniques (e.g., linear probing classi- fiers), manual prompts rely on domain/language insights instead of labeled data. Compared to human-designed prompts, AUTOPROMPT gener- ated prompts lack interpretability, which is similar to other probing techniques, such as linear probing classifiers. Another limitation of AUTOPROMPT is that it can sometimes struggle when the training data is highly imbalanced. For example, in Sec- tions 4 and 5 we show that the prompts often just increase the likelihood of the majority label. Re- balancing the training data can help to mitigate this problem. Finally, due to the greedy search over the large discrete space of phrases, AUTOPROMPT is sometimes brittle; we leave more effective crafting techniques for future directions. 8 Conclusion In this paper, we introduce AUTOPROMPT, an approach to develop automatically-constructed prompts that elicit knowledge from pretrained MLMs for a variety of tasks. We show that these prompts outperform manual prompts while requir- ing less human effort. Furthermore, the results for sentiment analysis and textual entailment sug- gest that, in some data-scarce settings, it may be more effective to prompt language models than to finetune them for the task. Although we fo- cus only on masked language models in this paper, our method can be trivially extended to standard language models, and thus maybe useful for con- structing inputs for models like GPT-3 (Brown et al., 2020). Source code and datasets to re- produce the results in this paper is available at http://ucinlp.github.io/autoprompt. Acknowledgments We would like to thank the LAMA and LPAQA teams for answering our questions. We would also like to thank the members of UCI NLP, Matt Gard- ner, Sebastian Riedel, and Antoine Bosselut for valuable feedback. This material is based upon work sponsored by the DARPA MCS program un- der Contract No. N660011924033 with the United States Office Of Naval Research."}, {"page_number": 10, "page_content": "References Zied Bouraoui, Jose Camacho-Collados, and Steven Schockaert. 2019. Inducing relational knowledge from BERT. In AAAI. Samuel R Bowman, Gabor Angeli, Christopher Potts, and Christopher D Manning. 2015. A large anno- tated corpus for learning natural language inference. In EMNLP. Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. 2020. Language models are few-shot learners. arXiv preprint arXiv:2005.14165. Alexis Conneau, German Kruszewski, Guillaume Lam- \u00b4 ple, Lo\u00a8\u0131c Barrault, and Marco Baroni. 2018. What you can cram into a single vector: Probing sentence embeddings for linguistic properties. In ACL. Ido Dagan, Oren Glickman, and Bernardo Magnini. 2005. The PASCAL recognising textual entailment challenge. In Machine Learning Challenges Work- shop. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: pre-training of deep bidirectional transformers for language under- standing. In NAACL. Jesse Dodge, Gabriel Ilharco, Roy Schwartz, Ali Farhadi, Hannaneh Hajishirzi, and Noah Smith. 2020. Fine-tuning pretrained language models: Weight initializations, data orders, and early stop- ping. arXiv preprint arXiv:2002.06305. Hady ElSahar, Pavlos Vougiouklis, Arslen Remaci, Christophe Gravier, Jonathon S. Hare, Fred\u00b4 erique \u00b4 Laforest, and Elena Simperl. 2018. T-REx: A large scale alignment of natural language with knowledge base triples. In LREC. John Hewitt and Percy Liang. 2019. Designing and interpreting probes with control tasks. In EMNLP. Shankar Iyer, Nikhil Dandekar, and Kornel Csernai. 2017. First quora dataset release: Question pairs. Sarthak Jain and Byron C Wallace. 2019. Attention is not explanation. In NAACL. Zhengbao Jiang, Frank F Xu, Jun Araki, and Graham Neubig. 2020. How can we know what language models know? In TACL. Sunjae Kwon, Cheongwoong Kang, Jiyeon Han, and Jaesik Choi. 2019. Why do masked neural language models still need common sense knowledge? arXiv preprint arXiv:1911.03024. Patrick Lewis, Ludovic Denoyer, and Sebastian Riedel. 2019. Unsupervised question answering by cloze translation. In ACL. Nelson F Liu, Matt Gardner, Yonatan Belinkov, Matthew Peters, and Noah A Smith. 2019. Linguis- tic knowledge and transferability of contextual rep- resentations. In NAACL. Ilya Loshchilov and Frank Hutter. 2018. Decoupled weight decay regularization. In International Con- ference on Learning Representations. Marco Marelli, Stefano Menini, Marco Baroni, Luisa Bentivogli, Raffaella Bernardi, Roberto Zamparelli, et al. 2014. A SICK cure for the evaluation of com- positional distributional semantic models. In LREC. Marius Mosbach, Maksym Andriushchenko, and Diet- rich Klakow. 2020. On the stability of fine-tuning bert: Misconceptions, explanations, and strong base- lines. Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep contextualized word repre- sentations. In NAACL. Fabio Petroni, Tim Rocktaschel, Patrick Lewis, Anton \u00a8 Bakhtin, Yuxiang Wu, Alexander H Miller, and Se- bastian Riedel. 2019. Language models as knowl- edge bases? In EMNLP. Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. 2019. Language models are unsupervised multitask learners. Techni- cal report. Timo Schick and Hinrich Schutze. 2020. Exploit- \u00a8 ing cloze questions for few-shot text classification and natural language inference. arXiv preprint arXiv:2001.07676. Vered Shwartz, Peter West, Ronan Le Bras, Chan- dra Bhagavatula, and Yejin Choi. 2020. Unsuper- vised commonsense question answering with self- talk. arXiv preprint arXiv:2004.05483. Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D Manning, Andrew Ng, and Christopher Potts. 2013. Recursive deep models for semantic compositionality over a sentiment tree- bank. In EMNLP. Daniil Sorokin and Iryna Gurevych. 2017. Context- aware representations for knowledge base relation extraction. In EMNLP. Trieu H Trinh and Quoc V Le. 2018. A simple method for commonsense reasoning. arXiv preprint arXiv:1806.02847. Elena Voita and Ivan Titov. 2020. Information- theoretic probing with minimum description length. In EMNLP. Eric Wallace, Shi Feng, Nikhil Kandpal, Matt Gardner, and Sameer Singh. 2019. Universal adversarial trig- gers for attacking and analyzing NLP. In EMNLP."}, {"page_number": 11, "page_content": "Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R Bowman. 2019. GLUE: A multi-task benchmark and analysis plat- form for natural language understanding. In ICLR. Sarah Wiegreffe and Yuval Pinter. 2019. Attention is not not explanation. In EMNLP. Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pier- ric Cistac, Tim Rault, Remi Louf, Morgan Fun- \u00b4 towicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Can- wen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. 2019. HuggingFace\u2019s Transformers: State-of-the- art natural language processing. arXiv preprint arXiv:1910.03771."}, {"page_number": 12, "page_content": "A Effect of Hyperparameters on Sentiment Analysis BERT 0.90 Accuracy 0.85 |xtrig| = 3 |xtrig| = 5 |xtrig| = 4 |xtrig| = 6 0.80 0.75 RoBERTa 0.90 Accuracy 0.85 0.80 0.75 1 2 3 4 5 Label Set Size, |Vy| Figure 3: Effect of Label and Trigger Set Sizes on sentiment analysis. The number of candidate replace- ments is fixed at |Vcand| = 100. Increasing the label set size improves performance, while changing the trigger length does not have much impact. To measure the effects of the AUTOPROMPT search hyperparameters, we plot the validation ac- curacy as a function of label set size |Vy| and the number of trigger tokens |xtrig| in Figure 3. We fix the number of candidates at |Vcand| = 100. We observe similar trends when |Vcand| = 10. Varying the number of trigger tokens generally has little effect. On the other hand, there is a sub- stantial increase in accuracy when increasing the label set size from 1 to 3 (approximately +5% for BERT, and +10% for RoBERTa). After analyzing the label sets, we find that our method generally produces intuitive results\u2014\u201cmarvelous\u201d and \u201cphi- lanthrop\u201d are associated with positive sentiment, whereas \u201cworse\u201d and \u201cincompetence\u201d are associ- ated with negative sentiment for RoBERTa. B Relation Extraction Details Following Petroni et al. (2019), we use the pre- trained RE model from Sorokin and Gurevych (2017) as our baseline. To encode the sentence, this model uses a combination of an LSTM-based relation encoder and an attention mechanism. To make predictions, the model constructs a knowl- edge graph whose edges are the extracted relation triples. The standard RE evaluation measures how well the model predicts the relation types of entity pairs on the sentence level. Since our goal is to extract the object of relation triplets, rather than the relation itself, we tweak the standard RE evaluation. We feed the RE model sentences from test facts and we query the resulting graph for all edges that contain the given subject and relation. Then we select the triple with the highest confidence and compare it\u2019s object to the gold object. We do this for every fact and take the average across all relations to get the overall preci- sion. The RE model is not trained to predict two of the original T-REx relations. For fair comparison, we exclude these two relations for our evaluation."}, {"page_number": 13, "page_content": "C Additional Fact Retrieval Results Relation Manual Prompt (LAMA) P1001 [X] is a legal term in [Y] 1000 P101 [X] works in the field of [Y] P103 The native language of [X] is [Y] 1000 P106 [X] is a [Y] by profession P108 [X] works for [Y] 376 6.79 5.74 P127 [X] is owned by [Y] 548 34.79 P1303 P131 [X] is located in [Y] 1000 P136 [X] plays [Y] music 1000 0.75 16.76 55.42 P1376 [X] is the capital of [Y] 310 P138 [X] is named after [Y] P140 P1412 [X] used to communicate in [Y] 1000 P159 P17 P176 P178 P19 [X] was born in [Y] P190 P20 P264 [X] is represented by music label [Y] 1000 P30 [X] is located in [Y] 1000 P31 P36 P361 [X] is part of [Y] P37 P39 [X] has the position of [Y] 1000 P407 [X] was written in [Y] P413 [X] plays in [Y] position P449 [X] was originally aired on [Y] P463 [X] is a member of [Y] P47 [X] shares border with [Y] 1000 P495 [X] was created in [Y] 1000 P527 [X] consists of [Y] P530 [X] maintains diplomatic relations with [Y] 927 P740 [X] was founded in [Y] P937 [X] used to work in [Y] #train 864 1000 [X] plays [Y] 1000 7.59 18.02 856 [X] is affiliated with the [Y] religion 445 0.63 The headquarter of [X] is in [Y] 1000 [X] is located in [Y] 1000 [X] is produced by [Y] 1000 [X] is developed by [Y] 560 1000 [X] and [Y] are twin cities 895 [X] died in [Y] 1000 [X] is [Y] citizen 1000 [X] is located in [Y] 1000 [X] is a [Y] 1000 The capital of [X] is [Y] 1000 1000 The original language of [X] is [Y] 1000 The official language of [X] is [Y] 311 1000 1000 1000 679 1000 1000 1000 LAMA LPAQA 70.47 72.75 9.91 5.32 72.16 72.16 0.63 0.0 32.46 23.27 22.81 73.93 59.83 61.55 59.69 59.83 65.02 64.71 32.37 35.57 31.29 35.48 85.64 81.67 62.84 59.12 21.08 20.87 2.41 2.31 1.91 27.91 27.91 31.16 9.56 10.26 43.82 P27 0.0 41.51 46.69 P276 41.5 41.5 30.74 14.75 54.93 25.44 18.56 36.66 36.66 51.95 62.16 62.16 23.61 31.44 44.51 43.93 48.48 54.55 56.83 62.63 7.96 16.14 30.72 59.18 65.22 0.53 23.74 41.7 20.89 9.08 34.39 67.11 57.33 13.67 13.34 16.5 32.23 11.07 10.55 2.81 3.92 3.11 7.59 13.68 13.89 29.77 39.1 38.36 AUTOPROMPT 82.45 12.79 82.09 14.72 8.62 35.95 15.38 37.46 40.17 66.05 75.26 71.21 35.47 52.15 87.78 66.72 19.92 44.11 P279 [X] is a subclass of [Y] 1000 70.36 60.6 17.7 P364 68.42 54.22 19.52 36.63 25.61 Table 6: A breakdown of all relations for fact retrieval on the original dataset from Petroni et al. (2019). We compare P@1 of prompts generated by LAMA, LPAQA, and our approach using five prompt tokens."}, {"page_number": 14, "page_content": "Relation Method P101 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P103 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P106 Manual [X] is a [Y] by profession 0.73 AUTOPROMPT BERT 15.83 AUTOPROMPT RoBERTa [X] supporters studied politicians musician turned [Y] [X] (), astronomers businessman\u00b7former [Y] 19.24 P127 Manual AUTOPROMPT BERT P1303 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P136 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P1376 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P178 Manual [X] is developed by [Y] 62.76 AUTOPROMPT BERT AUTOPROMPT RoBERTa [X] is memory arcade branding by [Y] 64.45 [X] 1987 floppy simulator users sued [Y] 69.56 P20 Manual [X] died in [Y] 32.07 AUTOPROMPT BERT AUTOPROMPT RoBERTa [X] reorganizationotype photographic studio in [Y] 33.53 [X].. enigmatic twentieth nowadays near [Y] 31.33 P27 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P276 Manual [X] is located in [Y] 43.73 AUTOPROMPT BERT AUTOPROMPT RoBERTa P279 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P37 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa P407 Manual [X] was written in [Y] 60.21 AUTOPROMPT BERT AUTOPROMPT RoBERTa P413 Manual AUTOPROMPT BERT AUTOPROMPT RoBERTa Prompt P@1 [X] works in the field of [Y] 11.52 [X] probability earliest fame totaled studying [Y] 15.01 [X] 1830 dissertation applying mathsucci [Y] 0.17 The native language of [X] is [Y] 74.54 [X]PA communerug speaks proper [Y] 84.87 [X]neau optionally fluent!?\u00a8traditional [Y] 81.61 [X] is owned by [Y] 36.67 [X] is hindwings mainline architecture within [Y] [X] picThom unwillingness officially governs [Y] 39.58 47.01 AUTOPROMPT RoBERTa [X] plays [Y] 18.91 [X] playingdrum concertoative electric [Y] 42.69 [X]Trump learned soloKeefe classical [Y] 44.44 [X] plays [Y] music 0.7 [X] freaking genre orchestra fiction acid [Y] 59.95 [X] blends postwar hostage drama sax [Y] 52.97 [X] is the capital of [Y] 81.11 [X] boasts native territory traditionally called [Y] 63.33 [X] limestone depositedati boroughDepending [Y] 28.33 [X] is [Y] citizen 0.0 [X] m\u00b3 badminton pieces internationally representing [Y] 46.13 [X] offic organise forests statutes northwestern [Y] 42.07 [X] consists kilograms centred neighborhoods in [Y] [X] manoeuv constructs whistleblowers hills near [Y] 37.47 44.64 [X] is a subclass of [Y] 31.04 [X] is \u02c6\u0131 adequately termed coated [Y] 55.65 [X],formerly prayers unstaceous [Y] 52.55 The official language of [X] is [Y] 56.89 [X]inen dialects resembled officially exclusively [Y] 54.44 [X]onen tribes descending speak mainly [Y] 53.67 \u00b4 [X] playedic every dialect but [Y] 69.31 72.0 [X] scaven pronunciation.*Wikipedia speaks [Y] [X] plays in [Y] position 0.53 [X] played colors skier \u2194 defensive [Y] 41.71 23.21 [X],\u201d (), ex-,Liverpool [Y] Table 7: Examples of manual prompts (first line, shown with BERT\u2019s P@1) and prompts generated via AUTO- PROMPT for Fact Retrieval."}, {"page_number": 15, "page_content": "D Additional Relation Extraction Results Relation Model Context and Prompt Prediction P103 (native language) P36 (capital) P530 (diplomatic relation) BERT The Black Sea forms in an east-west trending elliptical de- pression which lies between Bulgaria, Georgia, Romania, Russia, Turkey, and Ukraine. Ukraine qualified some im- migration actually entered [MASK]. P106 (occupation) RoBERTa Spencer Treat Clark (born September 24, 1987) is an Amer- ican actor who has appeared in several films, including Glad- iator, Mystic River, and Unbreakable. Spencer Treat Clark famously the famously handsome the [MASK]. BERT Alexandra Lamy (born 14 October 1971) is a French actress. Alexandra Lamy speaks airfield dripping % of [MASK]. RoBERTa Kirk was born in Clinton County, Ohio, and he entered ser- vice in Wilmington, Ohio. Clinton County famously includes the zoo influencing [MASK]. French Wilmington Russia Hulk P276 (location) BERT The Immortal Game was a chess game played by Adolf Anderssen and Lionel Kieseritzky on 21 June 1851 in Lon- donSeoul, during a break of the first international tourna- P279 (subclass of) BERT Mizeria is a Polish saladsandwich consisting of thinly sliced or grated cucumbers, often with sour cream though in some cases oil. Mizeria is calls direcend altitude [MASK]. P463 (member of) RoBERTa The Honda Civic del Sol is a 2-seater front-engined, front wheel drive, targa top car manufactured by HondaToyota in the 1990s. - 1 RoBERTa - RushAerosmith was a Canadian rock band consisting of Geddy Lee (bass, vocals, keyboards), Alex Lifeson (guitars), and Neil Peart (drums, percussion, lyricist). Alex Lifeson affiliatedalach the internationally initials [MASK]. Seoul 1 ment. The Immortal Game locatedstered regardless streets in [MASK]. P176 (manufacturer) Toyota Honda Civic del Sol defy trademarks of name- sake manufacturer [MASK]. food Kiss Table 8: Examples of prompts generated using AUTOPROMPT for relation extraction. Underlined words represent the gold object. The bottom half of the Table shows examples of our augmented evaluation where the original objects (represented by crossed-out words) are replaced by new objects."}]}